blueprint:
  name: Smart Heater
  description: Smartly heat a room using proximity, time and workday.
  domain: automation
  input:
    proximity:
      name: Proximity Sensor
      selector:
        entity:
          domain: proximity
    override:
      name: Override
      description: Turn heat on anyways
      selector:
        entity:
          domain:
            - binary_sensor
            - light
            - switch
    away_distance:
      name: Away Distance
      selector:
        number:
          min: 0
          max: 100
          step: 1
    away_temperature:
      name: Away Temperature
      selector:
        number:
          min: 0
          max: 30
          step: 0.1
          unit_of_measurement: °C
    active_temperature:
      name: Active Temperature
      selector:
        number:
          min: 0
          max: 30
          step: 0.1
          unit_of_measurement: °C
    active_time_start_weekday:
      name: Active Time Start Weekday
      selector:
        time:
    active_time_end_weekday:
      name: Active Time End Weekday
      selector:
        time:
    active_time_start_weekend:
      name: Active Time Start Weekend
      description: Also includes public holidays
      selector:
        time:
    active_time_end_weekend:
      name: Active Time End Weekend
      description: Also includes public holidays
      selector:
        time:
    climate:
      name: Climate
      selector:
        entity:
          domain: climate

mode: restart

variables:
  proximity: !input proximity
  override: !input override

  away_distance: !input away_distance
  away_temperature: !input away_temperature
  active_temperature: !input active_temperature

  active_time_start_weekday: !input active_time_start_weekday
  active_time_end_weekday: !input active_time_end_weekday

  active_time_start_weekend: !input active_time_start_weekend
  active_time_end_weekend: !input active_time_end_weekend

  climate: !input climate

  proximity_state: '{{ states(proximity) }}'
  proximity_direction: '{{ state_attr(proximity, "dir_of_travel") }}'
  override_state: '{{ states(override) }}'

  current_active_distance: '{{ [away_distance - proximity_state, 0] | max }}'
  max_temperature_difference: '{{ active_temperature - away_temperature }}'
  temperature_per_distance: '{{ max_temperature_difference / away_distance }}'
  step: '{{ state_attr(climate, "target_temp_step") }}'
  active_hour: >-
    {% set is_weekday = states("binary_sensor.workday_sensor") == "on" %}
    {% if is_weekday -%}
      {{ today_at(active_time_start_weekday) <= now() and now() < today_at(active_time_end_weekday) }}
    {%- else -%}
      {{ today_at(active_time_start_weekend) <= now() and now() < today_at(active_time_end_weekend) }}
    {%- endif %}
  new_setpoint: '{{ current_active_distance * temperature_per_distance + away_temperature }}'
  new_setpoint_bounded: >-
    {% if override_state == "on" -%}
      {{ active_temperature }}
    {% elif away_distance <= proximity_state or not active_hour  -%}
      {{ away_temperature }}
    {% elif proximity_state == 0 or proximity_direction == "towards" -%}
      {{ active_temperature }}
    {%- else -%}
      {{ new_setpoint - new_setpoint % step }}
    {%- endif %}


trigger:
  - platform: time
    at: !input active_time_start_weekday
  - platform: time
    at: !input active_time_end_weekday
  - platform: time
    at: !input active_time_start_weekend
  - platform: time
    at: !input active_time_end_weekend
  - platform: state
    entity_id: !input proximity
  - platform: state
    entity_id: !input override


action:
  - service: climate.set_temperature
    target:
      entity_id: !input climate
    data:
      temperature: '{{ new_setpoint_bounded }}'
  - if:
      - condition: state
        entity_id: !input climate
        state: "off"
    then:
      - service: climate.set_hvac_mode
        data:
          hvac_mode: heat
        target:
          entity_id: !input climate